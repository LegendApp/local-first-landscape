{
  "Version": 1,
  "Id": "electricsql",
  "Name": "ElectricSQL",
  "Website": "https://electric-sql.com",
  "Deployment": [
    "Self-hosted",
    "Hosted"
  ],
  "License": "Apache 2.0",
  "AppTarget": {
    "Platform": {
      "data": [
        "Browser",
        "React Native",
        "iOS",
        "Android",
        "macOS",
        "WASM",
        "Linux",
        "Node",
        "Javascript",
        "Typescript",
        "Elixir"
      ]
    }
  },
  "ServerSideData": {
    "PersistenceMechanism": {
      "data": [
        "Postgres"
      ]
    },
    "DataModelParadigm": {
      "data": "Relational"
    }
  },
  "ClientSideData": {
    "PersistenceMechanism": {
      "data": [
        "In-Memory",
        "Browser File Cache",
        "Localstorage",
        "IndexedDB",
        "OPFS",
        "SQLite",
        "PGLite",
        "React Query",
        "TanStack Optimistic",
        "Cloudflare Durable Object Storage",
        "Cloudflare D1",
        "Redis",
        "Custom"
      ],
      "comment": "\n        Electric syncs data out of Postgres into anything you like.\n        From an in-memory state variable to a local embedded database.\n      "
    },
    "DataModel": {
      "data": "Log, Object or relational",
      "comment": "\n        Data syncs in as a log of logical change operations.\n        These can be materialized as collections of rows,\n        or into an embedded database as relations in tables.\n      "
    },
    "OfflineReads": {
      "data": "Full Support",
      "comment": "Full support when shape is synced."
    },
    "DataSize": {
      "data": "Limited by size of hard drive"
    }
  },
  "SynchronizationStrategy": {
    "FullOrPartialReplication": {
      "data": [
        "Partial Replication"
      ],
      "comment": "Partial replication via shapes."
    },
    "ConflictHandling": {
      "data": "Flexible",
      "comment": "\n        Electric handles read-path sync. It doesn't prescribe a solution for writes\n        and thus avoids handling conflicts. It does provide documented patterns\n        and framework integrations for handling writes and optimistic state.\n        These implement a range of strategies for conflict handling.\n      "
    },
    "WhereResolutionOccurs": {
      "data": "Server"
    },
    "WhatGetsSynced": {
      "data": {
        "ServerToClient": "\n          Shape logs, in the form of a stream of change messages\n          (inserts, updates and deletes) and control messages\n          (up-to-date, must-refetch).\n        "
      }
    },
    "Authority": {
      "data": "Centralized",
      "comment": "Postgres is the source of truth, durability and total order."
    }
  },
  "__generated": {
    "lastUpdated": "2025-04-16T12:53:20.000Z"
  }
}